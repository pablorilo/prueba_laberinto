import pytest
from labyrinth import Labyrinth

"""# Test para verificar el numero de pasos que devuelve el algoritmo
@pytest.mark.parametrize(
    "maze, expected_result",
    [
        # Caso 1
        (
        [
            [".",".",".",".",".",".",".",".","."],
            ["#",".",".",".","#",".",".",".","."],
            [".",".",".",".","#",".",".",".","."],
            [".","#",".",".",".",".",".","#","."],
            [".","#",".",".",".",".",".","#","."]
            ]
            ,
            11
        ),
        # Caso 2
        (
            [
                [".",".",".",".",".",".",".",".","."],
                ["#",".",".",".","#",".",".","#","."],
                [".",".",".",".","#",".",".",".","."],
                [".","#",".",".",".",".",".","#","."],
                [".","#",".",".",".",".",".","#","."]
            ],
            -1
        ),
        # Caso 3
        (
            [
                [".",".","."],
                [".",".","."],
                [".",".","."]
            ],
            2
        ),
        # Caso 4
        (
            [
                [".",".",".",".",".",".",".",".",".","."],
                [".","#",".",".",".",".","#",".",".","."],
                [".","#",".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".",".",".","."],
                [".","#",".",".",".",".",".",".",".","."],
                [".","#",".",".",".","#",".",".",".","."],
                [".",".",".",".",".",".","#",".",".","."],
                [".",".",".",".",".",".",".",".",".","."],
                [".",".",".",".",".",".",".",".",".","."]
            ],
            16
        ),
    ],
)
def test_move(maze, expected_result):
    # Crea una instancia de Labyrinth con el laberinto dado
    labyrinth = Labyrinth(maze)

    # Ejecuta el método move()
    labyrinth.move()

    # Verifica si se encontró el camino correctamente
    assert labyrinth.steps == expected_result"""
